const mock_event = {
  "result": "failed",
  "score": 0,
  "validation_steps": [
    {
      "description": "Verify if the resource with name 'cmtr-be17689b-lambda-test' violates rules",
      "index": 1,
      "meta": {
        "rules": [
          {
            "article": "AWS X-Ray helps to visualize the components of your application, identify performance bottlenecks, and troubleshoot requests that resulted in an error.",
            "description": "Lambda has active tracing disabled",
            "impact": "If active tracing is not enabled it will be harder to debug and operate your functions as the X-Ray service support allows you to rapidly diagnose errors, identify bottlenecks, slowdowns and timeouts, by breaking down the latency for your Lambda functions.",
            "remediation": "To turn on active tracing:\n  1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/\n  2. Navigate to Functions and then select your Lambda function.\n  3. Choose 'Configuration' and then choose 'Monitoring and operations' tools.\n  4. Choose Edit.\n  5. Under 'AWS X-Ray', toggle on 'Active tracing'.\n  6. Choose Save.",
            "severity": "Low"
          },
          {
            "article": "This control checks function settings for the following runtimes: nodejs18.x,, nodejs16.x, nodejs14.x, nodejs12.x, python3.9, python3.8, python3.7, ruby2.7, java11, java8, java8.al2, go1.x, dotnetcore3.1, and dotnet6.\nLambda runtimes are built around a combination of operating system, programming language, and software libraries that are subject to maintenance and security updates. When a runtime component is no longer supported for security updates, Lambda deprecates the runtime. Even though you cannot create functions that use the deprecated runtime, the function is still available to process invocation events. Make sure that your Lambda functions are current and do not use out-of-date runtime environments.\nIt is strongly recommended that you migrate functions to a supported runtime version so that you continue to receive security patches and remain eligible for technical support.",
            "description": "Lambda functions should not use no longer supported runtimes",
            "impact": "When security updates are no longer available for a component of a runtime, Lambda deprecates the runtime. Because of this, using deprecated Lambda runtimes can pose a security risk. Moreover, functions that use a deprecated runtime are no longer eligible for technical support.",
            "remediation": "To update a function, you need to migrate it to a supported runtime version. \n1. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\n2. In the navigation pane click on the 'Functions'.\n3. Scroll down in the 'Code' tab to the 'Runtime settings' section.\n4. Click 'Edit'.\n5. Select a supported runtime version.\n6. Click 'Save'.",
            "severity": "Info"
          },
          {
            "article": "When lambda functions using the latest version of the implemented runtime environment, functions benefit from new features and enhancements, better security, performance and reliability",
            "description": "Lambda functions not are not using latest runtime environment versions",
            "impact": "Without keeping the Lambda functions runtime up-to-date, it is possible to miss out security patches or other updates. And eventually it will be impossible to update the function.",
            "remediation": "Use AWS CLI to update lambda runtime version:  \naws lambda update-function-configuration --function-name \"function_name\" --runtime \"runtime_version\"",
            "severity": "Medium"
          }
        ],
        "resource_name": "cmtr-be17689b-lambda-test",
        "service": "lambda"
      }
    },
    {
      "description": "Verify if the resource with name 'cmtr-be17689b-s3-test' violates rules",
      "index": 2,
      "meta": {
        "rules": [
          {
            "article": "You can configure a Lambda function to connect to private subnets in a virtual private cloud (VPC) in your AWS account. Use Amazon Virtual Private Cloud (Amazon VPC) to create a private network for resources such as databases, cache instances, or internal services. Connect your function to the VPC to access private resources while the function is running.",
            "description": "Lambda functions are not in a VPC",
            "impact": "Lambda without a VPC is open to the internet. It can increase opportunities for malicious activity such as spamming and Denial-of-Service (DoS) attacks. Also, Lambda without a VPC cannot access AWS resources.",
            "remediation": "1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.\n2. Navigate to Functions and then select your Lambda function.\n3. Scroll to Network and then select a VPC with the connectivity requirements of the function.\n4. To run your functions in high availability mode, Security Hub recommends that you choose at least 2 subnets. \n5. Choose at least one security group that has the connectivity requirements of the function \n6. Choose Save.",
            "severity": "Low"
          },
          {
            "article": "For storing sensitive information, you can encrypt environment variable values prior to sending them to Lambda by using the console's encryption helpers. This adds an additional layer of encryption that obscures secret values in the Lambda console and API output, even for users who have permission to use the key. In your code, you retrieve the encrypted value from the environment and decrypt it by using the AWS KMS API.",
            "description": "Lambda environment variables are not encrypted in transit",
            "impact": "Without encrypting environment variable values in transit, there is a possibility of unauthorized access or accidental exposure (in the Lambda console and API output) of sensitive and critical data stored in variables.",
            "remediation": "1. Use the AWS Key Management Service (AWS KMS) to create any customer managed keys for Lambda to use for server-side and client-side encryption. \n2. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\n3. In the navigation pane click on the 'Functions'.\n4. Click on the required function.\n5. Click on the 'Configuration' and then 'Environment variables'.\n6. Click 'Edit'.\n7. Under 'Encryption in transit', choose 'Enable helpers for encryption in transit'.\n8. For each environment variable that you want to enable console encryption helpers for, choose 'Encrypt' next to the environment variable.\n9. Under 'AWS KMS key to encrypt in transit', choose a customer managed key that you created at the beginning of this procedure.\n10. Choose 'Execution role policy' and copy the policy. This policy grants permission to your function's execution role to decrypt the environment variables.\n11. Save this policy to use in the last step of this procedure.\n12. Add code to your function that decrypts the environment variables. Choose 'Decrypt secrets snippet' to see an example.\n13. Click 'Encrypt'.\n14. Choose 'Save'.\n15. Set up permissions. If you're enabling client-side encryption for security in transit, your function needs permission to call the 'kms:Decrypt' API operation. Add the policy that you saved previously in this procedure to the function's execution role.",
            "severity": "Medium"
          }
        ],
        "resource_name": "cmtr-be17689b-s3-test",
        "service": "s3"
      }
    }
  ]
};

// mock_events_stm_data
mock_events_stm_data = {
    "items": [
    {
        "action": "verify_start_job:succeeded",
        "data": {}
    },
//    {
//        "action": "verify_start_job:failed",
//        "data": {}
//    },
    {
        "action": "eval:began",
        "data": {}
    },
    {
       "action": "eval:failed",
       "data": {
            "score": 0,
            "steps_passed_ratio": null,
            "validation": "{\n  \"result\": \"failed\",\n  \"steps_passed_ratio\": null,\n  \"validation_steps\": [\n    {\n      \"description\": \"Verify the assume role cannot be assumed from another aws account.\",\n      \"index\": 1,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \".*\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-assume\",\n          \"validation_pattern\": \".*AccessDenied.*\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"Verify the readonly role cannot be assumed from another aws account.\",\n      \"index\": 2,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \".*\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-readonly\",\n          \"validation_pattern\": \".*AccessDenied.*\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test checks assume role whether it has AdministratorAccess permissions.\",\n      \"index\": 3,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test assumes the assume role.\",\n      \"index\": 4,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"arn:aws:sts::196241772369:assumed-role/cmtr-af96e5bd-iam-ar-iam_role-assume/cloud-mentor-validation-assume-role\",\n          \"validation_pattern\": \".*assumed-role/cmtr-af96e5bd-iam-ar-iam_role-assume/.*\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test assumes the readonly role.\",\n      \"index\": 5,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51\",\n          \"validation_pattern\": \".*assumed-role/cmtr-af96e5bd-iam-ar-iam_role-readonly/.*\"\n        }\n      },\n      \"step_passed\": false\n    },\n    {\n      \"description\": \"The test checks the readonly role whether it has AdministratorAccess permissions.\",\n      \"index\": 6,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the ListAttachedRolePolicies operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListAttachedRolePolicies on resource: role cmtr-af96e5bd-iam-ar-iam_role-readonly because no identity-based policy allows the iam:ListAttachedRolePolicies action\\n\\nAn error occurred (AccessDenied) when calling the ListRolePolicies operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListRolePolicies on resource: role cmtr-af96e5bd-iam-ar-iam_role-readonly because no identity-based policy allows the iam:ListRolePolicies action\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test checks that the readonly role can describe itself.\",\n      \"index\": 7,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the ListRoles operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListRoles on resource: arn:aws:iam::339713166899:role/ because no identity-based policy allows the iam:ListRoles action\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \".*arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-readonly.*\"\n        }\n      },\n      \"step_passed\": false\n    }\n  ]\n}"
       }
    },
    {
        "action": "clean_start_job:succeeded",
        "data": {}
    },
    {
       "action": "eval:ready",
       "data": {}
    },
//    {
//       "action": "verify_start_job:succeeded",
//       "data": {}
//    },
//    {
//        "action": "eval:began",
//        "data": {}
//    },
//    {
//        "action": "eval:succeeded",
//        "data": {
//            "steps_passed_ratio": 100,
//            "validation": "{\n  \"result\": \"failed\",\n  \"steps_passed_ratio\": null,\n  \"validation_steps\": [\n    {\n      \"description\": \"Verify the assume role cannot be assumed from another aws account.\",\n      \"index\": 1,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \".*\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-assume\",\n          \"validation_pattern\": \".*AccessDenied.*\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"Verify the readonly role cannot be assumed from another aws account.\",\n      \"index\": 2,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \".*\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-readonly\",\n          \"validation_pattern\": \".*AccessDenied.*\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test checks assume role whether it has AdministratorAccess permissions.\",\n      \"index\": 3,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test assumes the assume role.\",\n      \"index\": 4,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"arn:aws:sts::196241772369:assumed-role/cmtr-af96e5bd-iam-ar-iam_role-assume/cloud-mentor-validation-assume-role\",\n          \"validation_pattern\": \".*assumed-role/cmtr-af96e5bd-iam-ar-iam_role-assume/.*\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test assumes the readonly role.\",\n      \"index\": 5,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51\",\n          \"validation_pattern\": \".*assumed-role/cmtr-af96e5bd-iam-ar-iam_role-readonly/.*\"\n        }\n      },\n      \"step_passed\": false\n    },\n    {\n      \"description\": \"The test checks the readonly role whether it has AdministratorAccess permissions.\",\n      \"index\": 6,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the ListAttachedRolePolicies operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListAttachedRolePolicies on resource: role cmtr-af96e5bd-iam-ar-iam_role-readonly because no identity-based policy allows the iam:ListAttachedRolePolicies action\\n\\nAn error occurred (AccessDenied) when calling the ListRolePolicies operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListRolePolicies on resource: role cmtr-af96e5bd-iam-ar-iam_role-readonly because no identity-based policy allows the iam:ListRolePolicies action\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test checks that the readonly role can describe itself.\",\n      \"index\": 7,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the ListRoles operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListRoles on resource: arn:aws:iam::339713166899:role/ because no identity-based policy allows the iam:ListRoles action\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \".*arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-readonly.*\"\n        }\n      },\n      \"step_passed\": false\n    }\n  ]\n}"
//        }
//    },
//    {
//        "action": "clean_start_job:succeeded",
//        "data": {   }
//    },
//    {
//        "action": "cleanup:began",
//        "data": {}
//    },
//    {
//        "action": "cleanup:succeeded",
//        "data": {
//            "log": "s3://cmtr-syndicate-education-platform-verification-output-prod/Mark_Chesnavskii/SEP_CR/stm/task06/syndicate.log",
//            "passed": "success",
//            "score": 100,
//            "status": null,
//            "unblock_feedback": null
//        }
//    },
  ]
};

// mock events mock_events_jtm_data
mock_events_jtm_data = {
    "items": [
        {
            "action": "init:began",
            "data": {}
        },
        {
            "action": "init:succeeded",
            "data": {}
        },
        {
            "action": "setup:began",
            "data": {
            "   content_folder_at": "s3://epm-cmtr-dev-tf-state/Maksym_Andriienko/AWS/196241772369/iam_assume_role/2024_06_12_065605"
            }
        },
        {
            "action": "setup:succeeded",
            "data": {
                "definition": {
                    "content": {
                        "aws_region": "eu-central-1",
                        "bucket_owner": "196241772369",
                        "s3_arn": "arn:aws:s3:::cmtr-af96e5bd--s3--test-3754577",
                        "s3_confidential_object_1": "customers_info_PII.csv",
                        "s3_id": "cmtr-af96e5bd--s3--test-3754577",
                        "sns_topic_arn": "arn:aws:sns:eu-central-1:196241772369:cmtr-af96e5bd--sns--test",
                        "sns_topic_name": "cmtr-af96e5bd--sns--test"
                    }
                }
            }
        },
        {
            "action": "eval:ready",
            "data": {}
        },
        {
            "action": "eval:began",
            "data": {}
        },
        {
            "action": "eval:succeeded",
            "data": {
                "steps_passed_ratio": 100,
                "validation": "{\n  \"result\": \"failed\",\n  \"steps_passed_ratio\": null,\n  \"validation_steps\": [\n    {\n      \"description\": \"Verify the assume role cannot be assumed from another aws account.\",\n      \"index\": 1,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \".*\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-assume\",\n          \"validation_pattern\": \".*AccessDenied.*\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"Verify the readonly role cannot be assumed from another aws account.\",\n      \"index\": 2,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \".*\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-readonly\",\n          \"validation_pattern\": \".*AccessDenied.*\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test checks assume role whether it has AdministratorAccess permissions.\",\n      \"index\": 3,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test assumes the assume role.\",\n      \"index\": 4,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"arn:aws:sts::196241772369:assumed-role/cmtr-af96e5bd-iam-ar-iam_role-assume/cloud-mentor-validation-assume-role\",\n          \"validation_pattern\": \".*assumed-role/cmtr-af96e5bd-iam-ar-iam_role-assume/.*\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test assumes the readonly role.\",\n      \"index\": 5,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51\",\n          \"validation_pattern\": \".*assumed-role/cmtr-af96e5bd-iam-ar-iam_role-readonly/.*\"\n        }\n      },\n      \"step_passed\": false\n    },\n    {\n      \"description\": \"The test checks the readonly role whether it has AdministratorAccess permissions.\",\n      \"index\": 6,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 0,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the ListAttachedRolePolicies operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListAttachedRolePolicies on resource: role cmtr-af96e5bd-iam-ar-iam_role-readonly because no identity-based policy allows the iam:ListAttachedRolePolicies action\\n\\nAn error occurred (AccessDenied) when calling the ListRolePolicies operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListRolePolicies on resource: role cmtr-af96e5bd-iam-ar-iam_role-readonly because no identity-based policy allows the iam:ListRolePolicies action\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \"\"\n        }\n      },\n      \"step_passed\": true\n    },\n    {\n      \"description\": \"The test checks that the readonly role can describe itself.\",\n      \"index\": 7,\n      \"meta\": {\n        \"status_code\": {\n          \"actual_output\": 254,\n          \"validation_pattern\": \"^0$\"\n        },\n        \"std_err\": {\n          \"actual_output\": \"An error occurred (AccessDenied) when calling the ListRoles operation: User: arn:aws:sts::339713166899:assumed-role/cloud-mentor-management/i-07aae743557139e51 is not authorized to perform: iam:ListRoles on resource: arn:aws:iam::339713166899:role/ because no identity-based policy allows the iam:ListRoles action\",\n          \"validation_pattern\": \"\"\n        },\n        \"std_out\": {\n          \"actual_output\": \"\",\n          \"validation_pattern\": \".*arn:aws:iam::196241772369:role/cmtr-af96e5bd-iam-ar-iam_role-readonly.*\"\n        }\n      },\n      \"step_passed\": false\n    }\n  ]\n}"
            }
        },
        {
            "action": "cleanup:began",
            "data": {}
        },
//        {
//            "action": "cleanup:status",
//            "data": {
//                    "status": "",
//                    "status_url": "s3://epm-cmtr-dev-tf-state/Maksym_Andriienko_af96e5bd/module_aws_typ0/iam_assume_role/2024_06_21_110728/show_error.log"
//                }
//        },
//        {
//            "action": "cleanup:status",
//            "data": {
//                    "status": "test red",
//                    "status_url": "s3://epm-cmtr-dev-tf-state/Maksym_Andriienko_af96e5bd/module_aws_typ0/iam_assume_role/2024_06_21_110728/show_error.log"
//                }
//        },
        {
            "action": "cleanup:status",
            "data": {
                "status": "",
                "status_show": false,
                "status_url": "s3://epm-cmtr-dev-tf-state/Maksym_Andriienko_af96e5bd/module_aws_typ0_sandbox/iam_assume_role/2024_06_25_141154/show_error.log"
            }
        },
//        {
//            "action": "cleanup:status",
//            "data": {
//                "status": "",
//                "status_show": true,
//                "status_url": "s3://epm-cmtr-dev-tf-state/Maksym_Andriienko_af96e5bd/module_aws_typ0_sandbox/iam_assume_role/2024_06_25_141154/show_error.log"
//            }
//        },
        {
            "action": "cleanup:succeeded",
            "data": {
                "log": "s3://epm-cmtr-dev-tf-state/Anatolii_Hevlenko_daccfcab/module_aws_typ1/task00/2024_05_30_130806/pipeline.log",
                "passed": "success",
                "score": 100,
                "status": null,
                "unblock_feedback": null
            }
        },
    ]
};


// mock events from dev ui mock_events_ui_data
mock_events_ui_data = {
    "items": [
        {
            "action": "setup_start_job:succeeded",
            "data": {}
        },
        {
            "action": "setup:began",
            "data": {
                "error_message": "Error occurred: An error occurred (ValidationException) when calling the CreateFunction operation: 1 validation error detected: Value '300000' at 'timeout' failed to satisfy constraint: Member must have value less than or equal to 900"
            }
        },
        {
            "action": "setup:succeeded",
            "data": "{\n  \"result\": null,\n  \"validation_steps\": [\n    {\n      \"description\": \"Verify if the resource named 'cmtr-af96e5bd-lambda-test' in the service 'Lambda' in the region 'eu-central-1' violates rules\",\n      \"index\": 1,\n      \"meta\": {\n        \"rules\": [\n          {\n            \"article\": \"Lambda functions in a single AWS account in one Region share the concurrency limit. If one function exceeds the concurrent limit, this prevents other functions from being invoked by the Lambda service. You can set reserved concurrency for Lambda functions to ensure that they can be invoked even if the overall capacity has been exhausted.\",\n            \"description\": \"Lambda reserved concurrency disabled\",\n            \"impact\": \"If reserved concurrency is disabled and if the overall capacity has been exhausted Lambda functions cannot be invoked.\",\n            \"remediation\": \"To turn on active tracing:\\n1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/\\n2. Navigate to Functions and then select your Lambda function.\\n3. Choose 'Configuration' and then choose 'Concurrency'.\\n4. Under Concurrency, choose Edit.\\n5. Choose Reserve concurrency. Enter the amount of concurrency to reserve for the function.\\n6. Choose Save.\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"For storing sensitive information, you can encrypt environment variable values prior to sending them to Lambda by using the console's encryption helpers. This adds an additional layer of encryption that obscures secret values in the Lambda console and API output, even for users who have permission to use the key. In your code, you retrieve the encrypted value from the environment and decrypt it by using the AWS KMS API.\",\n            \"description\": \"Lambda environment variables are not encrypted in transit\",\n            \"impact\": \"Without encrypting environment variable values in transit, there is a possibility of unauthorized access or accidental exposure (in the Lambda console and API output) of sensitive and critical data stored in variables.\",\n            \"remediation\": \"1. Use the AWS Key Management Service (AWS KMS) to create any customer managed keys for Lambda to use for server-side and client-side encryption. \\n2. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\\n3. In the navigation pane click on the 'Functions'.\\n4. Click on the required function.\\n5. Click on the 'Configuration' and then 'Environment variables'.\\n6. Click 'Edit'.\\n7. Under 'Encryption in transit', choose 'Enable helpers for encryption in transit'.\\n8. For each environment variable that you want to enable console encryption helpers for, choose 'Encrypt' next to the environment variable.\\n9. Under 'AWS KMS key to encrypt in transit', choose a customer managed key that you created at the beginning of this procedure.\\n10. Choose 'Execution role policy' and copy the policy. This policy grants permission to your function's execution role to decrypt the environment variables.\\n11. Save this policy to use in the last step of this procedure.\\n12. Add code to your function that decrypts the environment variables. Choose 'Decrypt secrets snippet' to see an example.\\n13. Click 'Encrypt'.\\n14. Choose 'Save'.\\n15. Set up permissions. If you're enabling client-side encryption for security in transit, your function needs permission to call the 'kms:Decrypt' API operation. Add the policy that you saved previously in this procedure to the function's execution role.\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"You can configure a Lambda function to connect to private subnets in a virtual private cloud (VPC) in your AWS account. Use Amazon Virtual Private Cloud (Amazon VPC) to create a private network for resources such as databases, cache instances, or internal services. Connect your function to the VPC to access private resources while the function is running.\",\n            \"description\": \"Lambda functions are not in a VPC\",\n            \"impact\": \"Lambda without a VPC is open to the internet. It can increase opportunities for malicious activity such as spamming and Denial-of-Service (DoS) attacks. Also, Lambda without a VPC cannot access AWS resources.\",\n            \"remediation\": \"1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.\\n2. Navigate to Functions and then select your Lambda function.\\n3. Scroll to Network and then select a VPC with the connectivity requirements of the function.\\n4. To run your functions in high availability mode, Security Hub recommends that you choose at least 2 subnets. \\n5. Choose at least one security group that has the connectivity requirements of the function \\n6. Choose Save.\",\n            \"severity\": \"Low\"\n          },\n          {\n            \"article\": \"AWS X-Ray helps to visualize the components of your application, identify performance bottlenecks, and troubleshoot requests that resulted in an error.\",\n            \"description\": \"Lambda has active tracing disabled\",\n            \"impact\": \"If active tracing is not enabled it will be harder to debug and operate your functions as the X-Ray service support allows you to rapidly diagnose errors, identify bottlenecks, slowdowns and timeouts, by breaking down the latency for your Lambda functions.\",\n            \"remediation\": \"To turn on active tracing:\\n  1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/\\n  2. Navigate to Functions and then select your Lambda function.\\n  3. Choose 'Configuration' and then choose 'Monitoring and operations' tools.\\n  4. Choose Edit.\\n  5. Under 'AWS X-Ray', toggle on 'Active tracing'.\\n  6. Choose Save.\",\n            \"severity\": \"Low\"\n          },\n          {\n            \"article\": \"If you do not specify a Customer managed key when using environment variables, Amazon Lambda uses its AWS owned key for data encryption on your environment.\\nWhen you create and use your own KMS CMK customer-managed keys to protect the data on your environment, you obtain full control over who can use the CMK keys and access the encrypted data. The AWS KMS service allows you to create, rotate, disable, enable, and audit your Customer Master Keys (CMKs).\\nIn addition, if you provide a Customer managed key, you must attach the policy statement for CloudWatch access. You must also create the Customer managed key-specific execution role.\",\n            \"description\": \"Lambda environment variables not encrypted with KMS CMK\",\n            \"impact\": \"Without a KMS CMK customer-managed key, you do not have full and granular control over who can access key that is used for encryption.\",\n            \"remediation\": \"1. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/ .\\n2. In the navigation pane click on the 'Functions'.\\n3. Click on the required function.\\n4. Click on the 'Configuration' and then 'Environment variables'.\\n5. Click 'Edit'.\\n6. Under 'Encryption configuration' choose 'Use a customer master key'.\\n7. Select existing key or create a new one.\\n8. CLick Save\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"When lambda functions using the latest version of the implemented runtime environment, functions benefit from new features and enhancements, better security, performance and reliability\",\n            \"description\": \"Lambda functions not are not using latest runtime environment versions\",\n            \"impact\": \"Without keeping the Lambda functions runtime up-to-date, it is possible to miss out security patches or other updates. And eventually it will be impossible to update the function.\",\n            \"remediation\": \"Use AWS CLI to update lambda runtime version:  \\naws lambda update-function-configuration --function-name \\\"function_name\\\" --runtime \\\"runtime_version\\\"\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"This control checks function settings for the following runtimes: nodejs18.x,, nodejs16.x, nodejs14.x, nodejs12.x, python3.9, python3.8, python3.7, ruby2.7, java11, java8, java8.al2, go1.x, dotnetcore3.1, and dotnet6.\\nLambda runtimes are built around a combination of operating system, programming language, and software libraries that are subject to maintenance and security updates. When a runtime component is no longer supported for security updates, Lambda deprecates the runtime. Even though you cannot create functions that use the deprecated runtime, the function is still available to process invocation events. Make sure that your Lambda functions are current and do not use out-of-date runtime environments.\\nIt is strongly recommended that you migrate functions to a supported runtime version so that you continue to receive security patches and remain eligible for technical support.\",\n            \"description\": \"Lambda functions should not use no longer supported runtimes\",\n            \"impact\": \"When security updates are no longer available for a component of a runtime, Lambda deprecates the runtime. Because of this, using deprecated Lambda runtimes can pose a security risk. Moreover, functions that use a deprecated runtime are no longer eligible for technical support.\",\n            \"remediation\": \"To update a function, you need to migrate it to a supported runtime version. \\n1. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\\n2. In the navigation pane click on the 'Functions'.\\n3. Scroll down in the 'Code' tab to the 'Runtime settings' section.\\n4. Click 'Edit'.\\n5. Select a supported runtime version.\\n6. Click 'Save'.\",\n            \"severity\": \"Info\"\n          },\n          {\n            \"article\": \"CloudWatch Lambda Insights is a monitoring and troubleshooting solution for serverless applications running on AWS Lambda. The solution collects, aggregates, and summarizes system-level metrics including CPU time, memory, disk, and network. It also collects, aggregates, and summarizes diagnostic information such as cold starts and Lambda worker shutdowns to help you isolate issues with your Lambda functions and resolve them quickly.\\nLambda Insights uses a new CloudWatch Lambda extension, which is provided as a Lambda layer. When you install this extension on a Lambda function, it collects system-level metrics and emits a single performance log event for every invocation of that Lambda function. CloudWatch uses embedded metric formatting to extract metrics from the log events.\",\n            \"description\": \"Enhanced Monitoring for Lambda Functions disabled\",\n            \"impact\": \"With Enhanced Monitoring for Lambda functions disabled, you are missing out on the opportunity to use a monitoring and troubleshooting solution that helps you isolate issues with your Lambda functions and resolve them quickly.\",\n            \"remediation\": \"When you enable Lambda Insights on a function in the Lambda console for a supported runtime, Lambda adds the Lambda Insights extension as a layer to your function, and verifies or attempts to attach the CloudWatchLambdaInsightsExecutionRolePolicy policy to your function\\u2019s execution role.\\nTo enable Lambda Insights in the Lambda console:\\n1. Open the Functions page of the Lambda console https://console.aws.amazon.com/lambda/home#/functions.\\n2. Choose your function.\\n3. Choose the 'Configuration' tab.\\n4. On the 'Monitoring and operations tools' pane, choose 'Edit'.\\n5. Under 'CloudWatch Lambda Insights', turn on 'Enhanced monitoring'.\\n6. Choose 'Save'.\",\n            \"severity\": \"Low\"\n          }\n        ]\n      }\n    }\n  ]\n}"
        },
        {
            "action": "eval:ready",
            "data": {}
        },
        {
            "action": "verify_start_job:succeeded",
            "data": {}
        },

        {
            "action": "eval:began",
            "data": {}
        },
        {
            "action": "eval:failed",
            "data": {
                "score": 0,
                "steps_passed_ratio": null,
                "validation": "{\n  \"result\": \"failed\",\n  \"score\": 0,\n  \"steps_passed_ratio\": null,\n  \"validation_steps\": [\n    {\n      \"description\": \"Verify if the resource named 'cmtr-af96e5bd-lambda-test' in the service 'Lambda' in the region 'eu-central-1' violates rules\",\n      \"index\": 1,\n      \"meta\": {\n        \"rules\": [\n          {\n            \"article\": \"If you do not specify a Customer managed key when using environment variables, Amazon Lambda uses its AWS owned key for data encryption on your environment.\\nWhen you create and use your own KMS CMK customer-managed keys to protect the data on your environment, you obtain full control over who can use the CMK keys and access the encrypted data. The AWS KMS service allows you to create, rotate, disable, enable, and audit your Customer Master Keys (CMKs).\\nIn addition, if you provide a Customer managed key, you must attach the policy statement for CloudWatch access. You must also create the Customer managed key-specific execution role.\",\n            \"description\": \"Lambda environment variables not encrypted with KMS CMK\",\n            \"impact\": \"Without a KMS CMK customer-managed key, you do not have full and granular control over who can access key that is used for encryption.\",\n            \"remediation\": \"1. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/ .\\n2. In the navigation pane click on the 'Functions'.\\n3. Click on the required function.\\n4. Click on the 'Configuration' and then 'Environment variables'.\\n5. Click 'Edit'.\\n6. Under 'Encryption configuration' choose 'Use a customer master key'.\\n7. Select existing key or create a new one.\\n8. CLick Save\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"This control checks function settings for the following runtimes: nodejs18.x,, nodejs16.x, nodejs14.x, nodejs12.x, python3.9, python3.8, python3.7, ruby2.7, java11, java8, java8.al2, go1.x, dotnetcore3.1, and dotnet6.\\nLambda runtimes are built around a combination of operating system, programming language, and software libraries that are subject to maintenance and security updates. When a runtime component is no longer supported for security updates, Lambda deprecates the runtime. Even though you cannot create functions that use the deprecated runtime, the function is still available to process invocation events. Make sure that your Lambda functions are current and do not use out-of-date runtime environments.\\nIt is strongly recommended that you migrate functions to a supported runtime version so that you continue to receive security patches and remain eligible for technical support.\",\n            \"description\": \"Lambda functions should not use no longer supported runtimes\",\n            \"impact\": \"When security updates are no longer available for a component of a runtime, Lambda deprecates the runtime. Because of this, using deprecated Lambda runtimes can pose a security risk. Moreover, functions that use a deprecated runtime are no longer eligible for technical support.\",\n            \"remediation\": \"To update a function, you need to migrate it to a supported runtime version. \\n1. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\\n2. In the navigation pane click on the 'Functions'.\\n3. Scroll down in the 'Code' tab to the 'Runtime settings' section.\\n4. Click 'Edit'.\\n5. Select a supported runtime version.\\n6. Click 'Save'.\",\n            \"severity\": \"Info\"\n          },\n          {\n            \"article\": \"AWS X-Ray helps to visualize the components of your application, identify performance bottlenecks, and troubleshoot requests that resulted in an error.\",\n            \"description\": \"Lambda has active tracing disabled\",\n            \"impact\": \"If active tracing is not enabled it will be harder to debug and operate your functions as the X-Ray service support allows you to rapidly diagnose errors, identify bottlenecks, slowdowns and timeouts, by breaking down the latency for your Lambda functions.\",\n            \"remediation\": \"To turn on active tracing:\\n  1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/\\n  2. Navigate to Functions and then select your Lambda function.\\n  3. Choose 'Configuration' and then choose 'Monitoring and operations' tools.\\n  4. Choose Edit.\\n  5. Under 'AWS X-Ray', toggle on 'Active tracing'.\\n  6. Choose Save.\",\n            \"severity\": \"Low\"\n          },\n          {\n            \"article\": \"Lambda functions in a single AWS account in one Region share the concurrency limit. If one function exceeds the concurrent limit, this prevents other functions from being invoked by the Lambda service. You can set reserved concurrency for Lambda functions to ensure that they can be invoked even if the overall capacity has been exhausted.\",\n            \"description\": \"Lambda reserved concurrency disabled\",\n            \"impact\": \"If reserved concurrency is disabled and if the overall capacity has been exhausted Lambda functions cannot be invoked.\",\n            \"remediation\": \"To turn on active tracing:\\n1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/\\n2. Navigate to Functions and then select your Lambda function.\\n3. Choose 'Configuration' and then choose 'Concurrency'.\\n4. Under Concurrency, choose Edit.\\n5. Choose Reserve concurrency. Enter the amount of concurrency to reserve for the function.\\n6. Choose Save.\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"For storing sensitive information, you can encrypt environment variable values prior to sending them to Lambda by using the console's encryption helpers. This adds an additional layer of encryption that obscures secret values in the Lambda console and API output, even for users who have permission to use the key. In your code, you retrieve the encrypted value from the environment and decrypt it by using the AWS KMS API.\",\n            \"description\": \"Lambda environment variables are not encrypted in transit\",\n            \"impact\": \"Without encrypting environment variable values in transit, there is a possibility of unauthorized access or accidental exposure (in the Lambda console and API output) of sensitive and critical data stored in variables.\",\n            \"remediation\": \"1. Use the AWS Key Management Service (AWS KMS) to create any customer managed keys for Lambda to use for server-side and client-side encryption. \\n2. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\\n3. In the navigation pane click on the 'Functions'.\\n4. Click on the required function.\\n5. Click on the 'Configuration' and then 'Environment variables'.\\n6. Click 'Edit'.\\n7. Under 'Encryption in transit', choose 'Enable helpers for encryption in transit'.\\n8. For each environment variable that you want to enable console encryption helpers for, choose 'Encrypt' next to the environment variable.\\n9. Under 'AWS KMS key to encrypt in transit', choose a customer managed key that you created at the beginning of this procedure.\\n10. Choose 'Execution role policy' and copy the policy. This policy grants permission to your function's execution role to decrypt the environment variables.\\n11. Save this policy to use in the last step of this procedure.\\n12. Add code to your function that decrypts the environment variables. Choose 'Decrypt secrets snippet' to see an example.\\n13. Click 'Encrypt'.\\n14. Choose 'Save'.\\n15. Set up permissions. If you're enabling client-side encryption for security in transit, your function needs permission to call the 'kms:Decrypt' API operation. Add the policy that you saved previously in this procedure to the function's execution role.\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"CloudWatch Lambda Insights is a monitoring and troubleshooting solution for serverless applications running on AWS Lambda. The solution collects, aggregates, and summarizes system-level metrics including CPU time, memory, disk, and network. It also collects, aggregates, and summarizes diagnostic information such as cold starts and Lambda worker shutdowns to help you isolate issues with your Lambda functions and resolve them quickly.\\nLambda Insights uses a new CloudWatch Lambda extension, which is provided as a Lambda layer. When you install this extension on a Lambda function, it collects system-level metrics and emits a single performance log event for every invocation of that Lambda function. CloudWatch uses embedded metric formatting to extract metrics from the log events.\",\n            \"description\": \"Enhanced Monitoring for Lambda Functions disabled\",\n            \"impact\": \"With Enhanced Monitoring for Lambda functions disabled, you are missing out on the opportunity to use a monitoring and troubleshooting solution that helps you isolate issues with your Lambda functions and resolve them quickly.\",\n            \"remediation\": \"When you enable Lambda Insights on a function in the Lambda console for a supported runtime, Lambda adds the Lambda Insights extension as a layer to your function, and verifies or attempts to attach the CloudWatchLambdaInsightsExecutionRolePolicy policy to your function\\u2019s execution role.\\nTo enable Lambda Insights in the Lambda console:\\n1. Open the Functions page of the Lambda console https://console.aws.amazon.com/lambda/home#/functions.\\n2. Choose your function.\\n3. Choose the 'Configuration' tab.\\n4. On the 'Monitoring and operations tools' pane, choose 'Edit'.\\n5. Under 'CloudWatch Lambda Insights', turn on 'Enhanced monitoring'.\\n6. Choose 'Save'.\",\n            \"severity\": \"Low\"\n          },\n          {\n            \"article\": \"When lambda functions using the latest version of the implemented runtime environment, functions benefit from new features and enhancements, better security, performance and reliability\",\n            \"description\": \"Lambda functions not are not using latest runtime environment versions\",\n            \"impact\": \"Without keeping the Lambda functions runtime up-to-date, it is possible to miss out security patches or other updates. And eventually it will be impossible to update the function.\",\n            \"remediation\": \"Use AWS CLI to update lambda runtime version:  \\naws lambda update-function-configuration --function-name \\\"function_name\\\" --runtime \\\"runtime_version\\\"\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"You can configure a Lambda function to connect to private subnets in a virtual private cloud (VPC) in your AWS account. Use Amazon Virtual Private Cloud (Amazon VPC) to create a private network for resources such as databases, cache instances, or internal services. Connect your function to the VPC to access private resources while the function is running.\",\n            \"description\": \"Lambda functions are not in a VPC\",\n            \"impact\": \"Lambda without a VPC is open to the internet. It can increase opportunities for malicious activity such as spamming and Denial-of-Service (DoS) attacks. Also, Lambda without a VPC cannot access AWS resources.\",\n            \"remediation\": \"1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.\\n2. Navigate to Functions and then select your Lambda function.\\n3. Scroll to Network and then select a VPC with the connectivity requirements of the function.\\n4. To run your functions in high availability mode, Security Hub recommends that you choose at least 2 subnets. \\n5. Choose at least one security group that has the connectivity requirements of the function \\n6. Choose Save.\",\n            \"severity\": \"Low\"\n          }\n        ]\n      },\n      \"step_passed\": false\n    }\n  ]\n}"
            }
        },
        {
        "action": "eval:ready",
        "data": {}
        },
//        {
//            "action": "verify_start_job:succeeded",
//            "data": {}
//        },
//
//        {
//            "action": "eval:began",
//            "data": {}
//        },
//        {
//            "action": "eval:succeeded",
//            "data": {
//                "score": 0,
//                "steps_passed_ratio": null,
//                "validation": "{\n  \"result\": \"failed\",\n  \"score\": 0,\n  \"steps_passed_ratio\": null,\n  \"validation_steps\": [\n    {\n      \"description\": \"Verify if the resource named 'cmtr-af96e5bd-lambda-test' in the service 'Lambda' in the region 'eu-central-1' violates rules\",\n      \"index\": 1,\n      \"meta\": {\n        \"rules\": [\n          {\n            \"article\": \"If you do not specify a Customer managed key when using environment variables, Amazon Lambda uses its AWS owned key for data encryption on your environment.\\nWhen you create and use your own KMS CMK customer-managed keys to protect the data on your environment, you obtain full control over who can use the CMK keys and access the encrypted data. The AWS KMS service allows you to create, rotate, disable, enable, and audit your Customer Master Keys (CMKs).\\nIn addition, if you provide a Customer managed key, you must attach the policy statement for CloudWatch access. You must also create the Customer managed key-specific execution role.\",\n            \"description\": \"Lambda environment variables not encrypted with KMS CMK\",\n            \"impact\": \"Without a KMS CMK customer-managed key, you do not have full and granular control over who can access key that is used for encryption.\",\n            \"remediation\": \"1. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/ .\\n2. In the navigation pane click on the 'Functions'.\\n3. Click on the required function.\\n4. Click on the 'Configuration' and then 'Environment variables'.\\n5. Click 'Edit'.\\n6. Under 'Encryption configuration' choose 'Use a customer master key'.\\n7. Select existing key or create a new one.\\n8. CLick Save\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"This control checks function settings for the following runtimes: nodejs18.x,, nodejs16.x, nodejs14.x, nodejs12.x, python3.9, python3.8, python3.7, ruby2.7, java11, java8, java8.al2, go1.x, dotnetcore3.1, and dotnet6.\\nLambda runtimes are built around a combination of operating system, programming language, and software libraries that are subject to maintenance and security updates. When a runtime component is no longer supported for security updates, Lambda deprecates the runtime. Even though you cannot create functions that use the deprecated runtime, the function is still available to process invocation events. Make sure that your Lambda functions are current and do not use out-of-date runtime environments.\\nIt is strongly recommended that you migrate functions to a supported runtime version so that you continue to receive security patches and remain eligible for technical support.\",\n            \"description\": \"Lambda functions should not use no longer supported runtimes\",\n            \"impact\": \"When security updates are no longer available for a component of a runtime, Lambda deprecates the runtime. Because of this, using deprecated Lambda runtimes can pose a security risk. Moreover, functions that use a deprecated runtime are no longer eligible for technical support.\",\n            \"remediation\": \"To update a function, you need to migrate it to a supported runtime version. \\n1. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\\n2. In the navigation pane click on the 'Functions'.\\n3. Scroll down in the 'Code' tab to the 'Runtime settings' section.\\n4. Click 'Edit'.\\n5. Select a supported runtime version.\\n6. Click 'Save'.\",\n            \"severity\": \"Info\"\n          },\n          {\n            \"article\": \"AWS X-Ray helps to visualize the components of your application, identify performance bottlenecks, and troubleshoot requests that resulted in an error.\",\n            \"description\": \"Lambda has active tracing disabled\",\n            \"impact\": \"If active tracing is not enabled it will be harder to debug and operate your functions as the X-Ray service support allows you to rapidly diagnose errors, identify bottlenecks, slowdowns and timeouts, by breaking down the latency for your Lambda functions.\",\n            \"remediation\": \"To turn on active tracing:\\n  1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/\\n  2. Navigate to Functions and then select your Lambda function.\\n  3. Choose 'Configuration' and then choose 'Monitoring and operations' tools.\\n  4. Choose Edit.\\n  5. Under 'AWS X-Ray', toggle on 'Active tracing'.\\n  6. Choose Save.\",\n            \"severity\": \"Low\"\n          },\n          {\n            \"article\": \"Lambda functions in a single AWS account in one Region share the concurrency limit. If one function exceeds the concurrent limit, this prevents other functions from being invoked by the Lambda service. You can set reserved concurrency for Lambda functions to ensure that they can be invoked even if the overall capacity has been exhausted.\",\n            \"description\": \"Lambda reserved concurrency disabled\",\n            \"impact\": \"If reserved concurrency is disabled and if the overall capacity has been exhausted Lambda functions cannot be invoked.\",\n            \"remediation\": \"To turn on active tracing:\\n1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/\\n2. Navigate to Functions and then select your Lambda function.\\n3. Choose 'Configuration' and then choose 'Concurrency'.\\n4. Under Concurrency, choose Edit.\\n5. Choose Reserve concurrency. Enter the amount of concurrency to reserve for the function.\\n6. Choose Save.\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"For storing sensitive information, you can encrypt environment variable values prior to sending them to Lambda by using the console's encryption helpers. This adds an additional layer of encryption that obscures secret values in the Lambda console and API output, even for users who have permission to use the key. In your code, you retrieve the encrypted value from the environment and decrypt it by using the AWS KMS API.\",\n            \"description\": \"Lambda environment variables are not encrypted in transit\",\n            \"impact\": \"Without encrypting environment variable values in transit, there is a possibility of unauthorized access or accidental exposure (in the Lambda console and API output) of sensitive and critical data stored in variables.\",\n            \"remediation\": \"1. Use the AWS Key Management Service (AWS KMS) to create any customer managed keys for Lambda to use for server-side and client-side encryption. \\n2. Login to the AWS Management Console and open the Amazon Lambda https://console.aws.amazon.com/lambda/.\\n3. In the navigation pane click on the 'Functions'.\\n4. Click on the required function.\\n5. Click on the 'Configuration' and then 'Environment variables'.\\n6. Click 'Edit'.\\n7. Under 'Encryption in transit', choose 'Enable helpers for encryption in transit'.\\n8. For each environment variable that you want to enable console encryption helpers for, choose 'Encrypt' next to the environment variable.\\n9. Under 'AWS KMS key to encrypt in transit', choose a customer managed key that you created at the beginning of this procedure.\\n10. Choose 'Execution role policy' and copy the policy. This policy grants permission to your function's execution role to decrypt the environment variables.\\n11. Save this policy to use in the last step of this procedure.\\n12. Add code to your function that decrypts the environment variables. Choose 'Decrypt secrets snippet' to see an example.\\n13. Click 'Encrypt'.\\n14. Choose 'Save'.\\n15. Set up permissions. If you're enabling client-side encryption for security in transit, your function needs permission to call the 'kms:Decrypt' API operation. Add the policy that you saved previously in this procedure to the function's execution role.\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"CloudWatch Lambda Insights is a monitoring and troubleshooting solution for serverless applications running on AWS Lambda. The solution collects, aggregates, and summarizes system-level metrics including CPU time, memory, disk, and network. It also collects, aggregates, and summarizes diagnostic information such as cold starts and Lambda worker shutdowns to help you isolate issues with your Lambda functions and resolve them quickly.\\nLambda Insights uses a new CloudWatch Lambda extension, which is provided as a Lambda layer. When you install this extension on a Lambda function, it collects system-level metrics and emits a single performance log event for every invocation of that Lambda function. CloudWatch uses embedded metric formatting to extract metrics from the log events.\",\n            \"description\": \"Enhanced Monitoring for Lambda Functions disabled\",\n            \"impact\": \"With Enhanced Monitoring for Lambda functions disabled, you are missing out on the opportunity to use a monitoring and troubleshooting solution that helps you isolate issues with your Lambda functions and resolve them quickly.\",\n            \"remediation\": \"When you enable Lambda Insights on a function in the Lambda console for a supported runtime, Lambda adds the Lambda Insights extension as a layer to your function, and verifies or attempts to attach the CloudWatchLambdaInsightsExecutionRolePolicy policy to your function\\u2019s execution role.\\nTo enable Lambda Insights in the Lambda console:\\n1. Open the Functions page of the Lambda console https://console.aws.amazon.com/lambda/home#/functions.\\n2. Choose your function.\\n3. Choose the 'Configuration' tab.\\n4. On the 'Monitoring and operations tools' pane, choose 'Edit'.\\n5. Under 'CloudWatch Lambda Insights', turn on 'Enhanced monitoring'.\\n6. Choose 'Save'.\",\n            \"severity\": \"Low\"\n          },\n          {\n            \"article\": \"When lambda functions using the latest version of the implemented runtime environment, functions benefit from new features and enhancements, better security, performance and reliability\",\n            \"description\": \"Lambda functions not are not using latest runtime environment versions\",\n            \"impact\": \"Without keeping the Lambda functions runtime up-to-date, it is possible to miss out security patches or other updates. And eventually it will be impossible to update the function.\",\n            \"remediation\": \"Use AWS CLI to update lambda runtime version:  \\naws lambda update-function-configuration --function-name \\\"function_name\\\" --runtime \\\"runtime_version\\\"\",\n            \"severity\": \"Medium\"\n          },\n          {\n            \"article\": \"You can configure a Lambda function to connect to private subnets in a virtual private cloud (VPC) in your AWS account. Use Amazon Virtual Private Cloud (Amazon VPC) to create a private network for resources such as databases, cache instances, or internal services. Connect your function to the VPC to access private resources while the function is running.\",\n            \"description\": \"Lambda functions are not in a VPC\",\n            \"impact\": \"Lambda without a VPC is open to the internet. It can increase opportunities for malicious activity such as spamming and Denial-of-Service (DoS) attacks. Also, Lambda without a VPC cannot access AWS resources.\",\n            \"remediation\": \"1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.\\n2. Navigate to Functions and then select your Lambda function.\\n3. Scroll to Network and then select a VPC with the connectivity requirements of the function.\\n4. To run your functions in high availability mode, Security Hub recommends that you choose at least 2 subnets. \\n5. Choose at least one security group that has the connectivity requirements of the function \\n6. Choose Save.\",\n            \"severity\": \"Low\"\n          }\n        ]\n      },\n      \"step_passed\": false\n    }\n  ]\n}"
//            }
//        },


    ]
};